name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build Docker image
      run: |
        docker-compose build
    
    - name: Run linting with flake8
      run: |
        docker-compose --profile test run --rm test flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        docker-compose --profile test run --rm test flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking with mypy
      run: |
        docker-compose --profile test run --rm test mypy src/incident_io_mcp/ --ignore-missing-imports
    
    - name: Run tests with pytest
      run: |
        docker-compose --profile test run --rm test pytest --cov=src/incident_io_mcp --cov-report=xml --cov-report=term-missing
      env:
        INCIDENT_IO_API_KEY: test-key-for-ci
    
    - name: Extract coverage report from container
      run: |
        # Create a temporary container to extract coverage.xml
        docker-compose --profile test run --rm -v $(pwd):/output test cp coverage.xml /output/ || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker-compose build
    
    - name: Install security tools in container
      run: |
        docker-compose --profile test run --rm test pip install bandit safety
    
    - name: Run security check with bandit
      run: |
        docker-compose --profile test run --rm test bandit -r src/ -f json -o bandit-report.json || true
        docker-compose --profile test run --rm test bandit -r src/
    
    - name: Check dependencies for security vulnerabilities
      run: |
        docker-compose --profile test run --rm test safety check --json --output safety-report.json || true
        docker-compose --profile test run --rm test safety check